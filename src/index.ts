import { app, BrowserWindow, ipcMain } from "electron";
import {
  generatePath,
  setCornerDist,
  setCornerPointSpacing,
  setCornerSplitPercent,
  setInjectPoints,
  setNormalizeCorners,
  setPointSpacing,
  setRobotLength,
  setRobotWidth,
} from "./javaUtils/pathfinder";
import { Vertex } from "./javaUtils/structures";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    minHeight: 525,
    minWidth: 750,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle("generatePath", async (event, start: Vertex, end: Vertex) => {
  return generatePath(start, end);
});

ipcMain.handle("setPointSpacing", async (event, spacing: number) => {
  return setPointSpacing(spacing);
});

ipcMain.handle("setCornerPointSpacing", async (event, spacing: number) => {
  return setCornerPointSpacing(spacing);
});

ipcMain.handle("setCornerDist", async (event, distance: number) => {
  return setCornerDist(distance);
});

ipcMain.handle("setInjectPoints", async (event, inject: boolean) => {
  console.log("Inject points: ", inject);
  return setInjectPoints(inject);
});

ipcMain.handle("setNormalizeCorners", async (event, normalize: boolean) => {
  return setNormalizeCorners(normalize);
});

ipcMain.handle("setCornerSplitPercent", async (event, percent: number) => {
  return setCornerSplitPercent(percent);
});

ipcMain.handle("setRobotLength", async (event, height: number) => {
  return setRobotLength(height);
});

ipcMain.handle("setRobotWidth", async (event, width: number) => {
  return setRobotWidth(width);
});
