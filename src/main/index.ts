import {
  app,
  BrowserWindow,
  dialog,
  ipcMain,
  Menu,
  nativeTheme,
} from "electron";
import {
  generatePath,
  getCornerDist,
  getCornerPointSpacing,
  getCornerSplitPercent,
  getInjectPoints,
  getNormalizeCorners,
  getPointSpacing,
  getSnapMode,
  setCornerCutDist,
  setCornerDist,
  setCornerPointSpacing,
  setCornerSplitPercent,
  setInjectPoints,
  setNormalizeCorners,
  setPointSpacing,
  setRobotLength,
  setRobotWidth,
  setSnapMode,
} from "../utils/pathfinder";
import { SnapMode, Vertex, WindowState } from "../utils/structures";
import fs from "fs";
import path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const ABOUT_WINDOW_WEBPACK_ENTRY: string;
declare const ABOUT_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const PREFERENCES_WINDOW_WEBPACK_ENTRY: string;
declare const PREFERENCES_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  nativeTheme.themeSource = getPref("theme", "system");
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    minHeight: 525,
    minWidth: 750,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webviewTag: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

function getPref(key: string, def: any) {
  let prefPath = path.join(app.getPath("userData"), "prefs.json");
  if (!fs.existsSync(prefPath)) {
    fs.writeFileSync(prefPath, "{}");
  }
  let prefs = JSON.parse(fs.readFileSync(prefPath, "utf-8"));
  if (prefs[key] === undefined) {
    prefs[key] = def;
    fs.writeFileSync(prefPath, JSON.stringify(prefs));
  }
  return prefs[key];
}

function setPref(key: string, value: any) {
  let prefPath = path.join(app.getPath("userData"), "prefs.json");
  if (!fs.existsSync(prefPath)) {
    fs.writeFileSync(prefPath, "{}");
  }
  let prefs = JSON.parse(fs.readFileSync(prefPath, "utf-8"));
  prefs[key] = value;
  fs.writeFileSync(prefPath, JSON.stringify(prefs));
}

let isDialogOpen = false;
ipcMain.handle(
  "setTheme",
  async (event, theme: "dark" | "light" | "system") => {
    setPref("theme", theme);
    nativeTheme.themeSource = theme;
  }
);

ipcMain.handle("getTheme", async (event) => {
  return getPref("theme", "system");
});

ipcMain.handle("getVersion", async (event) => {
  return app.getVersion();
});

ipcMain.handle("openFile", async (event) => {
  if (isDialogOpen) {
    return null;
  }
  isDialogOpen = true;
  let file = await dialog.showOpenDialog({
    properties: ["openFile"],
    filters: [{ name: "JSON", extensions: ["json"] }],
  });
  isDialogOpen = false;
  if (file.canceled) {
    return null;
  } else {
    const content = fs.readFileSync(file.filePaths[0], "utf-8");
    addToRecent(file.filePaths[0]);
    return { data: content, path: file.filePaths[0] };
  }
});

ipcMain.handle("updateWindowState", async (event, state: WindowState) => {
  if (state.tab === "path") {
    BrowserWindow.getFocusedWindow()?.setTitle("Path Editor - Oxplorer GUI");
  } else {
    if (state.filename === undefined) {
      BrowserWindow.getFocusedWindow()?.setTitle("Auto Editor - Oxplorer GUI");
      return;
    }
    BrowserWindow.getFocusedWindow()?.setTitle(
      (state.unsaved ? `*${state.filename}` : state.filename) +
        " - Auto Editor - Oxplorer GUI"
    );
  }
});
ipcMain.handle("openFileFromPath", async (event, path: string) => {
  const content = fs.readFileSync(path, "utf-8");
  addToRecent(path);
  return content;
});

ipcMain.handle("saveFile", async (event, data: string, path: string) => {
  fs.writeFileSync(path, data);
});

ipcMain.handle("saveFileAs", async (event, data: string) => {
  if (isDialogOpen) {
    return null;
  }
  isDialogOpen = true;
  let file = await dialog.showSaveDialog({
    filters: [{ name: "JSON", extensions: ["json"] }],
    defaultPath: "NewAuto.json",
    nameFieldLabel: "NewAuto",
  });
  isDialogOpen = false;
  if (file.canceled) {
    return null;
  } else {
    fs.writeFileSync(file.filePath, data);
    addToRecent(file.filePath);
    return file.filePath;
  }
});

const newTemplate = JSON.stringify([
  {
    type: "command",
    id: "new_command",
    name: "New Command",
    parameters: {},
  },
]);

ipcMain.handle("newFile", async (event) => {
  if (isDialogOpen) {
    return null;
  }
  isDialogOpen = true;
  let file = await dialog.showSaveDialog({
    filters: [{ name: "JSON", extensions: ["json"] }],
    defaultPath: "NewAuto.json",
    nameFieldLabel: "NewAuto",
  });
  isDialogOpen = false;
  if (file.canceled) {
    return null;
  } else {
    fs.writeFileSync(file.filePath, newTemplate);
    addToRecent(file.filePath);
    return { data: newTemplate, path: file.filePath };
  }
});

ipcMain.handle("getRecentFiles", async (event) => {
  return getRecent();
});

ipcMain.handle("getFileSeperator", async (event) => {
  return path.sep;
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle("generatePath", async (event, start: Vertex, end: Vertex) => {
  return generatePath(start, end);
});

ipcMain.handle("setPointSpacing", async (event, spacing: number) => {
  return setPointSpacing(spacing);
});

ipcMain.handle("setCornerPointSpacing", async (event, spacing: number) => {
  return setCornerPointSpacing(spacing);
});

ipcMain.handle("setCornerDist", async (event, distance: number) => {
  return setCornerDist(distance);
});

ipcMain.handle("setInjectPoints", async (event, inject: boolean) => {
  return setInjectPoints(inject);
});

ipcMain.handle("setNormalizeCorners", async (event, normalize: boolean) => {
  return setNormalizeCorners(normalize);
});

ipcMain.handle("setCornerSplitPercent", async (event, percent: number) => {
  return setCornerSplitPercent(percent);
});

ipcMain.handle("setRobotLength", async (event, height: number) => {
  return setRobotLength(height);
});

ipcMain.handle("setRobotWidth", async (event, width: number) => {
  return setRobotWidth(width);
});

ipcMain.handle("setCornerCutDist", async (event, dist: number) => {
  return setCornerCutDist(dist);
});

ipcMain.handle("setSnapMode", async (event, snapMode: SnapMode) => {
  return setSnapMode(snapMode);
});

ipcMain.handle("getPointSpacing", async (event) => {
  return getPointSpacing();
});

ipcMain.handle("getCornerPointSpacing", async (event) => {
  return getCornerPointSpacing();
});

ipcMain.handle("getCornerDist", async (event) => {
  return getCornerDist();
});

ipcMain.handle("getInjectPoints", async (event) => {
  return getInjectPoints();
});

ipcMain.handle("getNormalizeCorners", async (event) => {
  return getNormalizeCorners();
});

ipcMain.handle("getCornerSplitPercent", async (event) => {
  return getCornerSplitPercent();
});

ipcMain.handle("getSnapMode", async (event) => {
  return getSnapMode();
});

function addToRecent(file: string) {
  // Add to recent files in user data
  // If it already exists, move it to the top
  // If there are more than 10, remove the last one
  let recent = getRecent();
  let index = recent.indexOf(file);
  if (index !== -1) {
    recent.splice(index, 1);
  }
  recent.unshift(file);
  if (recent.length > 10) {
    recent.pop();
  }
  let recentPath = path.join(app.getPath("userData"), "recent.json");
  fs.writeFileSync(recentPath, JSON.stringify(recent));
}

function getRecent() {
  let recentPath = path.join(app.getPath("userData"), "recent.json");
  if (!fs.existsSync(recentPath)) {
    fs.writeFileSync(recentPath, "[]");
  }
  return JSON.parse(fs.readFileSync(recentPath, "utf-8")) as string[];
}

// Add File, Edit, and Help menu items
// File - New, Open, Save, Save As
// Edit - Preferences
// Help - About
let menuTemplate: Electron.MenuItemConstructorOptions[] = [
  {
    label: "File",
    submenu: [
      {
        label: "New",
        click: () => {
          BrowserWindow.getFocusedWindow()?.webContents.send("newFile");
        },
        accelerator: "CmdOrCtrl+N",
      },
      {
        label: "Open",
        click: () => {
          BrowserWindow.getFocusedWindow()?.webContents.send("openFile");
        },
        accelerator: "CmdOrCtrl+O",
      },
      {
        label: "Save",
        click: () => {
          BrowserWindow.getFocusedWindow()?.webContents.send("saveFile");
        },
        accelerator: "CmdOrCtrl+S",
      },
      {
        label: "Save As",
        click: () => {
          BrowserWindow.getFocusedWindow()?.webContents.send("saveFileAs");
        },
        accelerator: "CmdOrCtrl+Shift+S",
      },
    ],
  },
  {
    label: "Edit",
    submenu: [
      {
        label: "Preferences",
        click: () => {
          const prefsWindow = new BrowserWindow({
            height: 150,
            width: 200,
            resizable: false,
            autoHideMenuBar: true,
            title: "Preferences",
            webPreferences: {
              preload: PREFERENCES_WINDOW_PRELOAD_WEBPACK_ENTRY,
            },
          });
          prefsWindow.loadURL(PREFERENCES_WINDOW_WEBPACK_ENTRY);
        },
      },
    ],
  },
  {
    label: "Help",
    submenu: [
      {
        label: "About",
        click: () => {
          const aboutWindow = new BrowserWindow({
            height: 250,
            width: 300,
            resizable: false,
            autoHideMenuBar: true,
            title: "About",
            webPreferences: {
              preload: ABOUT_WINDOW_PRELOAD_WEBPACK_ENTRY,
            },
          });
          aboutWindow.loadURL(ABOUT_WINDOW_WEBPACK_ENTRY);
          var handleRedirect = (e: Electron.Event, url: string) => {
            if (url != aboutWindow.webContents.getURL()) {
              e.preventDefault();
              require("electron").shell.openExternal(url);
            }
          };
          aboutWindow.webContents.on("will-navigate", handleRedirect);
        },
      },
      // Reload App (with shortcut)
      {
        label: "Reload",
        role: "reload",
      },
      {
        label: "Force Reload",
        role: "forceReload",
      },
      {
        label: "Toggle Developer Tools",
        role: "toggleDevTools",
      },
    ],
  },
];

const menu = Menu.buildFromTemplate(menuTemplate);
Menu.setApplicationMenu(menu);
